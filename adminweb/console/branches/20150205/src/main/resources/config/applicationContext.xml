<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">
	<context:property-placeholder location="classpath*:*.properties" />
	<context:component-scan
		base-package="com.tuanche.dao,com.tuanche.smc,com.tuanche.console.service,com.tuanche.tj.service,com.tuanche.console.dao,com.tuanche.console.util,com.tuanche.sites.dao,com.tuanche.sites.service,com.tuanche.service,com.tuanche.dao,com.tuanche.service.tongji" />
	<!-- admin黑名单 读取 -->
	<bean id="adminBlackRead" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/admin/read</value>
		</property>
	</bean>
	<bean id="adminBlackReadMaper" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="adminBlackRead" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/mapper/admin/read/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="adminBlackReadMaperaperpoxy" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.admin.read" />
		<property name="sqlSessionFactory" ref="adminBlackReadMaper" />
	</bean>

	<!-- 系统配置 读取 -->
	<bean id="sysConfigReadChe1001" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/che100/read</value>
		</property>
	</bean>
	<bean id="sysConfigReadChe100Maper" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="sysConfigReadChe1001" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/mapper/che/read/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="sysConfigReadChe100Maperpoxy" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.che.read" />
		<property name="sqlSessionFactory" ref="sysConfigReadChe100Maper" />
	</bean>
	<!-- 黑名单写入 -->
	<bean id="adminBlackWrite" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/admin/write</value>
		</property>
	</bean>
	<bean id="adminBlackWriteMaper" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="adminBlackWrite" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/mapper/admin/write/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="adminBlackWriteMaperMaperpoxy" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.admin.write" />
		<property name="sqlSessionFactory" ref="adminBlackWriteMaper" />
	</bean>
	<!-- sys——config配置写入 -->
	<bean id="sysConfigWriteChe100" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/che100/write</value>
		</property>
	</bean>
	<bean id="sysConfigWriteChe100Maper" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="sysConfigWriteChe100" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/mapper/che/write/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="sysConfigWriteChe100Maperpoxy" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.che.write" />
		<property name="sqlSessionFactory" ref="sysConfigWriteChe100Maper" />
	</bean>
	<!-- 读数据库 -->
	<bean id="semReadDS" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/sem/read</value>
		</property>
	</bean>
	<bean id="semReadSF" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="semReadDS" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/mapper/sem/read/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="semReadMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.sem.read" />
		<property name="sqlSessionFactory" ref="semReadSF" />
	</bean>
	<bean id="semWriteDS" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/sem/write</value>
		</property>
	</bean>

	<bean id="semWriteSF" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="semWriteDS" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/mapper/sem/write/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="semWriteMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.sem.write" />
		<property name="sqlSessionFactory" ref="semWriteSF" />
	</bean>
	<!--品牌车型 sites -->
	<bean id="sitesReadChe100" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/che100/read</value>
		</property>
	</bean>
	<bean id="sitesReadChe100Maper" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="sitesReadChe100" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/mapper/che/read/*Mapper.xml</value>
			</list>
		</property>

	</bean>

	<bean id="sitesWriteChe100" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/che100/write</value>
		</property>
	</bean>
	<bean id="sitesWriteChe100Maper" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="sitesWriteChe100" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/mapper/che/write/*Mapper.xml</value>
			</list>
		</property>
	</bean>


	<!--用户评价 读 -->
	<bean id="reviewReadChe100" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/che100/read</value>
		</property>
	</bean>
	<bean id="reviewReadChe100Maper" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="reviewReadChe100" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/mapper/che/read/*Mapper.xml</value>
			</list>
		</property>

	</bean>
	<!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类 -->
	<bean id="reviewMapperRead" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.che.read" />
		<property name="sqlSessionFactory" ref="reviewReadChe100Maper" />
	</bean>
	<!--用户评价写 -->
	<bean id="reviewWriteChe100" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/che100/read</value>
		</property>
	</bean>
	<bean id="reviewWriteChe100Maper" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="reviewWriteChe100" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/mapper/che/write/*Mapper.xml</value>
			</list>
		</property>

	</bean>
	<!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类 -->
	<bean id="reviewWriteMapperRead" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.che.write" />
		<property name="sqlSessionFactory" ref="reviewWriteChe100Maper" />
	</bean>
	<!-- ============================= -->


	<bean id="sitesMapperRead" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.che.read" />
		<property name="sqlSessionFactory" ref="sitesReadChe100Maper" />
	</bean>
	<bean id="sitesMapperWrite" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.che.write" />
		<property name="sqlSessionFactory" ref="sitesWriteChe100Maper" />
	</bean>

	<bean id="cheWriteMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.che.write" />
		<property name="sqlSessionFactory" ref="sitesWriteChe100Maper" />
	</bean>

	<bean id="erpReadDS" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/erp/read</value>
		</property>
	</bean>
	<bean id="erpReadSF" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="erpReadDS" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/console/read/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="erpMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.console.read" />
		<property name="sqlSessionFactory" ref="erpReadSF" />
	</bean>
	<!-- 读che100数据库 -->
	<bean id="cheReadDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/che100/read</value>
		</property>
	</bean>
	<bean id="cheReadSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="cheReadDataSource" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/console/cheread/*Mapper.xml</value>
				<value>classpath:com/tuanche/mapper/che/read/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="cheReadMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.console.cheread" />
		<property name="sqlSessionFactory" ref="cheReadSessionFactory" />
	</bean>
	<bean id="cheReadMapper1" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.che.read" />
		<property name="sqlSessionFactory" ref="cheReadSessionFactory" />
	</bean>
	<!-- 读admin数据库 -->
	<bean id="adminReadDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/admin/read</value>
		</property>
	</bean>
	<bean id="adminReadSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="adminReadDataSource" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/console/adminread/*Mapper.xml</value>
				<!-- zjl -->
				<value>classpath:com/tuanche/mapper/admin/read/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="adminReadMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.console.adminread" />
		<property name="sqlSessionFactory" ref="adminReadSessionFactory" />
	</bean>
	<!-- zjl -->
	<bean id="adminReadMapper1" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.admin.read" />
		<property name="sqlSessionFactory" ref="adminReadSessionFactory" />
	</bean>



	<!-- 写admin数据库 -->
	<bean id="adminWriteDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/admin/write</value>
		</property>
	</bean>
	<bean id="adminWriteSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="adminWriteDataSource" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/console/adminwrite/*Mapper.xml</value>
				<!-- zjl -->
				<value>classpath:com/tuanche/mapper/admin/write/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="adminWriteMapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.console.adminwrite" />
		<property name="sqlSessionFactory" ref="adminWriteSessionFactory" />
	</bean>
	<!-- -->
	<bean id="adminWriteMapper1" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.admin.write" />
		<property name="sqlSessionFactory" ref="adminWriteSessionFactory" />
	</bean>

	<!-- **************************************** 以下为资讯模块新添加配置 ******************************************** -->


	<!-- Admin数据库 数据源 -->
	<bean id="smcDataSourceWrite" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/admin/write" />
		<property name="lookupOnStartup" value="true" />
		<property name="cache" value="true" />
		<property name="proxyInterface" value="javax.sql.DataSource" />
	</bean>

	<bean id="smcSqlSessionFactoryWrite" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="smcDataSourceWrite" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<!-- mapper和resultmap配置路径 -->
		<property name="mapperLocations">
			<list>
				<!-- 表示在com.tuanche.smc.persistence.write.admin包或以下所有目录中，以-sqlMapper.xml结尾所有文件 -->
				<value>classpath:com/tuanche/smc/persistence/write/admin/**/*-sqlMapper.xml
				</value>
			</list>
		</property>
	</bean>

	<!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类 -->
	<bean id="smcMapperWrite" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.smc.persistence.write.admin" />
		<property name="sqlSessionFactory" ref="smcSqlSessionFactoryWrite" />
	</bean>


	<!-- mapper.erp.read -->
	<bean id="erpReadSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/erp/read</value>
		</property>
	</bean>
	<bean id="erpReadxml" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="erpReadSource" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:com/tuanche/mapper/erp/read/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="erpMapperPage" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.erp.read" />
		<property name="sqlSessionFactory" ref="erpReadxml" />
	</bean>

	<!-- Admin 数据库 【只读】数据源 -->
	<bean id="smcDataSourceRead" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/admin/read" />
		<property name="lookupOnStartup" value="true" />
		<property name="cache" value="true" />
		<property name="proxyInterface" value="javax.sql.DataSource" />
	</bean>
	<bean id="smcSqlSessionFactoryRead" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="smcDataSourceRead" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<!-- mapper和resultmap配置路径 -->
		<property name="mapperLocations">
			<list>
				<!-- 表示在com.tuanche.smc.persistence.read.admin包或以下所有目录中，以-sqlMapper.xml结尾所有文件 -->
				<value>classpath:com/tuanche/smc/persistence/read/admin/**/*-sqlMapper.xml
				</value>
			</list>
		</property>
	</bean>
	<!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类 -->
	<bean id="smcMapperRead" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.smc.persistence.read.admin" />
		<property name="sqlSessionFactory" ref="smcSqlSessionFactoryRead" />
	</bean>
	<!-- che100 数据库 【只读】数据源 -->
	<bean id="che100DataSourceRead" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/che100/read" />
		<property name="lookupOnStartup" value="true" />
		<property name="cache" value="true" />
		<property name="proxyInterface" value="javax.sql.DataSource" />
	</bean>

	<!-- <bean id="tongjiDataSourceRead" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName" value="java:jdbc/tongji/read" /> <property name="lookupOnStartup" 
		value="true" /> <property name="cache" value="true" /> <property name="proxyInterface" 
		value="javax.sql.DataSource" /> </bean> <bean id="tongjiSqlSessionFactoryRead" 
		class="org.mybatis.spring.SqlSessionFactoryBean"> <property name="dataSource" 
		ref="tongjiDataSourceRead" /> <property name="configLocation" value="classpath:config/console_mybatis_config.xml" 
		/> mapper和resultmap配置路径 <property name="mapperLocations"> <list> 表示在com.tuanche.smc.persistence.read.admin包或以下所有目录中，以-sqlMapper.xml结尾所有文件 
		<value>classpath:com/tuanche/sites/persistence/tongji/**/*-sqlMapper.xml</value> 
		</list> </property> </bean> -->

	<!-- 统计 -->
	<bean id="tongjiRead" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/tongji/read"></property>
	</bean>
	<bean id="tongjiFactoryRead" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="tongjiRead" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<!-- mapper和resultmap配置路径 -->
		<property name="mapperLocations">
			<list>
				<!-- 表示在com.tuanche.smc.persistence.read.admin包或以下所有目录中，以-sqlMapper.xml结尾所有文件 -->
				<value>classpath:com/tuanche/mapper/tongji/read/*-sqlMapper.xml</value>
			</list>
		</property>
	</bean>
	<!-- 统计 -->
	<bean id="tongjiWrite" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/tongji/write"></property>
	</bean>
	<bean id="tongjiFactoryWrite" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="tongjiWrite" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<!-- mapper和resultmap配置路径 -->
		<property name="mapperLocations">
			<list>
				<!-- 表示在com.tuanche.smc.persistence.read.admin包或以下所有目录中，以-sqlMapper.xml结尾所有文件 -->
				<value>classpath:com/tuanche/mapper/tongji/write/*-sqlMapper.xml</value>
			</list>
		</property>
	</bean>
	<!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类 -->
	<bean id="tongjiMapperReadtk" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.tongji.read" />
		<property name="sqlSessionFactory" ref="tongjiFactoryRead" />
	</bean>
	<!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类 -->
	<bean id="tongjiMapperWritetk" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.mapper.tongji.write" />
		<property name="sqlSessionFactory" ref="tongjiFactoryWrite" />
	</bean>

	<bean id="che100SqlSessionFactoryRead" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="che100DataSourceRead" />
		<property name="configLocation" value="classpath:config/console_mybatis_config.xml" />
		<!-- mapper和resultmap配置路径 -->
		<property name="mapperLocations">
			<list>
				<!-- 表示在com.tuanche.smc.persistence.read.admin包或以下所有目录中，以-sqlMapper.xml结尾所有文件 -->
				<value>classpath:com/tuanche/smc/persistence/read/che100/**/*-sqlMapper.xml
				</value>
			</list>
		</property>
	</bean>
	
	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="tongjiWrite" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 通过扫描的模式，扫描目录下所有的mapper， 根据对应的mapper.xml为其生成代理类 -->
	<bean id="che100MapperRead" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.tuanche.smc.persistence.read.che100" />
		<property name="sqlSessionFactory" ref="che100SqlSessionFactoryRead" />
	</bean>
	<bean name="com.tuanche.smc.dao.LocaleDao" class="com.tuanche.smc.dao.LocaleDao"
		init-method="init" />
	<bean name="com.tuanche.smc.dao.NewsClassfityDao" class="com.tuanche.smc.dao.NewsClassfityDao"
		init-method="init" />
	<bean name="com.tuanche.smc.dao.CarStyleDao" class="com.tuanche.smc.dao.CarStyleDao"
		init-method="init" />
	<bean name="com.tuanche.smc.dao.EditerDao" class="com.tuanche.smc.dao.EditerDao"
		init-method="init" />
	<bean name="com.tuanche.dao.che.UsedCarstyleDao" class="com.tuanche.dao.che.UsedCarstyleDao"
		init-method="init" />

</beans>
